--[[
    Dropdown Component
    Single or multi-selection dropdown menu
]]

local Dropdown = {}
Dropdown.__index = Dropdown

function Dropdown.new(library, options)
    local self = setmetatable({}, Dropdown)
    
    -- Default options
    options = options or {}
    self.Library = library
    self.Tab = options.Tab
    self.Name = options.Name or "Dropdown"
    self.Options = options.Options or {}
    self.MultiSelect = options.MultiSelect or false
    self.Default = options.Default or (self.MultiSelect and {} or nil)
    self.Callback = options.Callback or function() end
    self.LayoutOrder = options.LayoutOrder or 1
    
    -- Internal properties
    self.Value = self.MultiSelect and {} or nil
    self.Open = false
    
    -- Create dropdown UI
    self:_createUI()
    
    -- Initialize with default values
    if self.Default then
        if self.MultiSelect and type(self.Default) == "table" then
            for _, value in ipairs(self.Default) do
                self:Select(value, true)
            end
        elseif not self.MultiSelect then
            self:Select(self.Default, true)
        end
    end
    
    -- Update display text
    self:_updateDisplayText()
    
    return self
end

-- Create the dropdown UI elements
function Dropdown:_createUI()
    -- Container frame
    self.Container = Instance.new("Frame")
    self.Container.Name = self.Name .. "Dropdown"
    self.Container.Size = UDim2.new(1, 0, 0, 50)
    self.Container.BackgroundColor3 = self.Library.Theme.GetColor("ComponentBackground")
    self.Container.BorderSizePixel = 0
    self.Container.ClipsDescendants = true
    self.Container.LayoutOrder = self.LayoutOrder
    self.Container.Parent = self.Tab.Container
    
    -- Corner radius
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 4)
    corner.Parent = self.Container
    
    -- Title label
    self.Title = Instance.new("TextLabel")
    self.Title.Name = "Title"
    self.Title.Size = UDim2.new(1, -16, 0, 20)
    self.Title.Position = UDim2.new(0, 8, 0, 5)
    self.Title.BackgroundTransparency = 1
    self.Title.Text = self.Name
    self.Title.TextColor3 = self.Library.Theme.GetColor("PrimaryText")
    self.Title.TextSize = 14
    self.Title.Font = Enum.Font.GothamMedium
    self.Title.TextXAlignment = Enum.TextXAlignment.Left
    self.Title.Parent = self.Container
    
    -- Dropdown button
    self.DropdownButton = Instance.new("TextButton")
    self.DropdownButton.Name = "DropdownButton"
    self.DropdownButton.Size = UDim2.new(1, -16, 0, 24)
    self.DropdownButton.Position = UDim2.new(0, 8, 0, 25)
    self.DropdownButton.BackgroundColor3 = self.Library.Theme.GetColor("InputBackground")
    self.DropdownButton.Text = ""
    self.DropdownButton.AutoButtonColor = false
    self.DropdownButton.Parent = self.Container
    
    -- Button corner radius
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 4)
    btnCorner.Parent = self.DropdownButton
    
    -- Selected value display
    self.SelectedDisplay = Instance.new("TextLabel")
    self.SelectedDisplay.Name = "SelectedDisplay"
    self.SelectedDisplay.Size = UDim2.new(1, -25, 1, 0)
    self.SelectedDisplay.Position = UDim2.new(0, 8, 0, 0)
    self.SelectedDisplay.BackgroundTransparency = 1
    self.SelectedDisplay.Text = "None"
    self.SelectedDisplay.TextColor3 = self.Library.Theme.GetColor("SecondaryText")
    self.SelectedDisplay.TextSize = 14
    self.SelectedDisplay.Font = Enum.Font.Gotham
    self.SelectedDisplay.TextXAlignment = Enum.TextXAlignment.Left
    self.SelectedDisplay.Parent = self.DropdownButton
    
    -- Arrow icon
    self.Arrow = Instance.new("TextLabel")
    self.Arrow.Name = "Arrow"
    self.Arrow.Size = UDim2.new(0, 20, 0, 20)
    self.Arrow.Position = UDim2.new(1, -25, 0.5, -10)
    self.Arrow.BackgroundTransparency = 1
    self.Arrow.Text = "â–¼"
    self.Arrow.TextColor3 = self.Library.Theme.GetColor("SecondaryText")
    self.Arrow.TextSize = 12
    self.Arrow.Font = Enum.Font.GothamBold
    self.Arrow.Parent = self.DropdownButton
    
    -- Dropdown content (will be shown when open)
    self.DropdownContent = Instance.new("Frame")
    self.DropdownContent.Name = "DropdownContent"
    self.DropdownContent.Size = UDim2.new(1, -16, 0, 0) -- Will be resized when opened
    self.DropdownContent.Position = UDim2.new(0, 8, 0, 49)
    self.DropdownContent.BackgroundColor3 = self.Library.Theme.GetColor("DropdownContentBackground")
    self.DropdownContent.BorderSizePixel = 0
    self.DropdownContent.Visible = false
    self.DropdownContent.ZIndex = 5
    self.DropdownContent.Parent = self.Container
    
    -- Content corner radius
    local contentCorner = Instance.new("UICorner")
    contentCorner.CornerRadius = UDim.new(0, 4)
    contentCorner.Parent = self.DropdownContent
    
    -- Option list layout
    self.OptionList = Instance.new("UIListLayout")
    self.OptionList.SortOrder = Enum.SortOrder.LayoutOrder
    self.OptionList.Padding = UDim.new(0, 2)
    self.OptionList.Parent = self.DropdownContent
    
    -- Create option buttons
    self:_createOptions()
    
    -- Toggle dropdown on button click
    self.DropdownButton.MouseButton1Click:Connect(function()
        self:Toggle()
    end)
    
    -- Dropdown button hover effect
    self.DropdownButton.MouseEnter:Connect(function()
        self.DropdownButton.BackgroundColor3 = self.Library.Theme.GetColor("InputBackgroundHover")
    end)
    
    self.DropdownButton.MouseLeave:Connect(function()
        self.DropdownButton.BackgroundColor3 = self.Library.Theme.GetColor("InputBackground")
    end)
    
    -- Close dropdown when clicking outside
    game:GetService("UserInputService").InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and self.Open then
            local mousePos = game:GetService("UserInputService"):GetMouseLocation()
            local dropdownPosition = self.DropdownContent.AbsolutePosition
            local dropdownSize = self.DropdownContent.AbsoluteSize
            
            -- Check if click is outside the dropdown content
            if mousePos.X < dropdownPosition.X or mousePos.X > dropdownPosition.X + dropdownSize.X or
               mousePos.Y < dropdownPosition.Y or mousePos.Y > dropdownPosition.Y + dropdownSize.Y then
                -- Also make sure it's not on the dropdown button
                local buttonPosition = self.DropdownButton.AbsolutePosition
                local buttonSize = self.DropdownButton.AbsoluteSize
                
                if mousePos.X < buttonPosition.X or mousePos.X > buttonPosition.X + buttonSize.X or
                   mousePos.Y < buttonPosition.Y or mousePos.Y > buttonPosition.Y + buttonSize.Y then
                    self:Close()
                end
            end
        end
    end)
end

-- Create option buttons in the dropdown
function Dropdown:_createOptions()
    -- Clear existing options
    for _, child in ipairs(self.DropdownContent:GetChildren()) do
        if child:IsA("TextButton") then
            child:Destroy()
        end
    end
    
    -- Create buttons for each option
    for i, option in ipairs(self.Options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Name = "Option_" .. option
        optionButton.Size = UDim2.new(1, 0, 0, 24)
        optionButton.BackgroundColor3 = self.Library.Theme.GetColor("DropdownOptionBackground")
        optionButton.BackgroundTransparency = 0
        optionButton.BorderSizePixel = 0
        optionButton.AutoButtonColor = false
        optionButton.Text = ""
        optionButton.LayoutOrder = i
        optionButton.ZIndex = 6
        optionButton.Parent = self.DropdownContent
        
        -- Option label
        local optionLabel = Instance.new("TextLabel")
        optionLabel.Name = "Label"
        optionLabel.Size = UDim2.new(1, -8, 1, 0)
        optionLabel.Position = UDim2.new(0, 8, 0, 0)
        optionLabel.BackgroundTransparency = 1
        optionLabel.Text = option
        optionLabel.TextColor3 = self.Library.Theme.GetColor("DropdownOptionText")
        optionLabel.TextSize = 14
        optionLabel.Font = Enum.Font.Gotham
        optionLabel.TextXAlignment = Enum.TextXAlignment.Left
        optionLabel.ZIndex = 6
        optionLabel.Parent = optionButton
        
        -- For multi-select, add checkboxes
        if self.MultiSelect then
            local checkbox = Instance.new("Frame")
            checkbox.Name = "Checkbox"
            checkbox.Size = UDim2.new(0, 16, 0, 16)
            checkbox.Position = UDim2.new(1, -24, 0.5, -8)
            checkbox.BackgroundColor3 = self.Library.Theme.GetColor("CheckboxBackground")
            checkbox.BorderSizePixel = 0
            checkbox.ZIndex = 7
            checkbox.Parent = optionButton
            
            -- Checkbox corner radius
            local checkboxCorner = Instance.new("UICorner")
            checkboxCorner.CornerRadius = UDim.new(0, 3)
            checkboxCorner.Parent = checkbox
            
            -- Checkbox inner (check mark)
            local checkboxInner = Instance.new("Frame")
            checkboxInner.Name = "CheckboxInner"
            checkboxInner.Size = UDim2.new(0, 10, 0, 10)
            checkboxInner.Position = UDim2.new(0.5, 0, 0.5, 0)
            checkboxInner.AnchorPoint = Vector2.new(0.5, 0.5)
            checkboxInner.BackgroundColor3 = self.Library.Theme.GetColor("CheckboxFill")
            checkboxInner.BorderSizePixel = 0
            checkboxInner.Visible = false
            checkboxInner.ZIndex = 8
            checkboxInner.Parent = checkbox
            
            -- Inner checkbox corner radius
            local innerCorner = Instance.new("UICorner")
            innerCorner.CornerRadius = UDim.new(0, 2)
            innerCorner.Parent = checkboxInner
            
            -- Store reference to checkbox
            optionButton.Checkbox = checkbox
            optionButton.CheckboxInner = checkboxInner
        end
        
        -- Option button hover effect
        optionButton.MouseEnter:Connect(function()
            optionButton.BackgroundColor3 = self.Library.Theme.GetColor("DropdownOptionBackgroundHover")
        end)
        
        optionButton.MouseLeave:Connect(function()
            optionButton.BackgroundColor3 = self.Library.Theme.GetColor("DropdownOptionBackground")
        end)
        
        -- Option click handler
        optionButton.MouseButton1Click:Connect(function()
            self:Select(option)
            
            -- Close dropdown after selection (only for single-select)
            if not self.MultiSelect then
                self:Close()
            end
        end)
    end
    
    -- Update the size based on number of options
    local numOptions = #self.Options
    local contentHeight = numOptions * 26 -- 24px per option + 2px padding
    
    -- Cap max height and make scrollable if too many options
    local maxDisplayOptions = 6
    if numOptions > maxDisplayOptions then
        contentHeight = maxDisplayOptions * 26
        self.DropdownContent.CanvasSize = UDim2.new(0, 0, 0, numOptions * 26)
        self.DropdownContent.ScrollBarThickness = 4
        self.DropdownContent.ScrollingEnabled = true
    else
        self.DropdownContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        self.DropdownContent.ScrollBarThickness = 0
        self.DropdownContent.ScrollingEnabled = false
    end
    
    -- Store content height for animations
    self.ContentHeight = contentHeight
end

-- Toggle dropdown open/closed
function Dropdown:Toggle()
    if self.Open then
        self:Close()
    else
        self:Open()
    end
end

-- Open the dropdown
function Dropdown:Open()
    self.Open = true
    
    -- Show content
    self.DropdownContent.Visible = true
    
    -- Animate arrow and container
    game:GetService("TweenService"):Create(
        self.Arrow,
        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Rotation = 180}
    ):Play()
    
    -- Resize container to fit content
    local newContainerHeight = 50 + self.ContentHeight
    
    game:GetService("TweenService"):Create(
        self.Container,
        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Size = UDim2.new(1, 0, 0, newContainerHeight)}
    ):Play()
    
    game:GetService("TweenService"):Create(
        self.DropdownContent,
        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Size = UDim2.new(1, -16, 0, self.ContentHeight)}
    ):Play()
end

-- Close the dropdown
function Dropdown:Close()
    self.Open = false
    
    -- Animate arrow and container
    game:GetService("TweenService"):Create(
        self.Arrow,
        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Rotation = 0}
    ):Play()
    
    -- Resize container to default
    game:GetService("TweenService"):Create(
        self.Container,
        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Size = UDim2.new(1, 0, 0, 50)}
    ):Play()
    
    game:GetService("TweenService"):Create(
        self.DropdownContent,
        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        {Size = UDim2.new(1, -16, 0, 0)}
    ):Play()
    
    -- Hide content after animation
    delay(0.2, function()
        if not self.Open then
            self.DropdownContent.Visible = false
        end
    end)
end

-- Select an option
function Dropdown:Select(option, noCallback)
    if not table.find(self.Options, option) then return end
    
    if self.MultiSelect then
        -- Check if already selected
        local index = table.find(self.Value, option)
        
        if index then
            -- Remove from selection
            table.remove(self.Value, index)
        else
            -- Add to selection
            table.insert(self.Value, option)
        end
        
        -- Update checkbox visual
        for _, child in ipairs(self.DropdownContent:GetChildren()) do
            if child:IsA("TextButton") and child.Name == "Option_" .. option then
                child.CheckboxInner.Visible = not index
            end
        end
    else
        -- Single select - just update the value
        self.Value = option
    end
    
    -- Update display text
    self:_updateDisplayText()
    
    -- Call the callback function with the new value (unless suppressed)
    if not noCallback then
        self.Callback(self.Value)
    end
end

-- Update the displayed text in dropdown button
function Dropdown:_updateDisplayText()
    if self.MultiSelect then
        if #self.Value == 0 then
            self.SelectedDisplay.Text = "None"
        elseif #self.Value == 1 then
            self.SelectedDisplay.Text = self.Value[1]
        else
            self.SelectedDisplay.Text = tostring(#self.Value) .. " selected"
        end
    else
        self.SelectedDisplay.Text = self.Value or "None"
    end
end

-- Add option to the dropdown
function Dropdown:AddOption(option)
    if table.find(self.Options, option) then return end
    
    table.insert(self.Options, option)
    self:_createOptions()
end

-- Remove option from the dropdown
function Dropdown:RemoveOption(option)
    local index = table.find(self.Options, option)
    if not index then return end
    
    table.remove(self.Options, index)
    
    -- If selected, remove from value
    if self.MultiSelect then
        local valueIndex = table.find(self.Value, option)
        if valueIndex then
            table.remove(self.Value, valueIndex)
            self:_updateDisplayText()
        end
    elseif self.Value == option then
        self.Value = nil
        self.SelectedDisplay.Text = "None"
    end
    
    self:_createOptions()
end

-- Set all options
function Dropdown:SetOptions(options)
    self.Options = options
    
    -- Reset selection
    if self.MultiSelect then
        self.Value = {}
    else
        self.Value = nil
    end
    
    self:_updateDisplayText()
    self:_createOptions()
end

-- Get current selection
function Dropdown:GetValue()
    return self.Value
end

-- Set value without triggering callback
function Dropdown:SetValue(value, noCallback)
    if self.MultiSelect and type(value) == "table" then
        self.Value = {}
        for _, v in ipairs(value) do
            if table.find(self.Options, v) then
                table.insert(self.Value, v)
            end
        end
    elseif not self.MultiSelect and table.find(self.Options, value) then
        self.Value = value
    end
    
    -- Update visual elements
    if self.MultiSelect then
        for _, child in ipairs(self.DropdownContent:GetChildren()) do
            if child:IsA("TextButton") and child.CheckboxInner then
                local optionName = child.Name:gsub("Option_", "")
                child.CheckboxInner.Visible = table.find(self.Value, optionName) ~= nil
            end
        end
    end
    
    self:_updateDisplayText()
    
    if not noCallback then
        self.Callback(self.Value)
    end
end

-- Update theme colors
function Dropdown:_updateTheme()
    self.Container.BackgroundColor3 = self.Library.Theme.GetColor("ComponentBackground")
    self.Title.TextColor3 = self.Library.Theme.GetColor("PrimaryText")
    self.DropdownButton.BackgroundColor3 = self.Library.Theme.GetColor("InputBackground")
    self.SelectedDisplay.TextColor3 = self.Library.Theme.GetColor("SecondaryText")
    self.Arrow.TextColor3 = self.Library.Theme.GetColor("SecondaryText")
    self.DropdownContent.BackgroundColor3 = self.Library.Theme.GetColor("DropdownContentBackground")
    
    -- Update option buttons
    for _, child in ipairs(self.DropdownContent:GetChildren()) do
        if child:IsA("TextButton") then
            child.BackgroundColor3 = self.Library.Theme.GetColor("DropdownOptionBackground")
            child.Label.TextColor3 = self.Library.Theme.GetColor("DropdownOptionText")
            
            if self.MultiSelect and child.Checkbox then
                child.Checkbox.BackgroundColor3 = self.Library.Theme.GetColor("CheckboxBackground")
                child.CheckboxInner.BackgroundColor3 = self.Library.Theme.GetColor("CheckboxFill")
            end
        end
    end
end

return Dropdown
